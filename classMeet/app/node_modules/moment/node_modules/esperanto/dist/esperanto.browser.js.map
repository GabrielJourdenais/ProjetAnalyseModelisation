{"version":3,"file":"esperanto.browser.js","sources":["../../01-babel/1/utils/hasNamedImports.js","../../01-babel/1/utils/hasNamedExports.js","../../../node_modules/magic-string/src/utils/btoa.js","../../../node_modules/magic-string/src/SourceMap/index.js","../../../node_modules/magic-string/src/utils/getRelativePath.js","../../../node_modules/magic-string/src/Bundle/index.js","../../../node_modules/magic-string/src/MagicString/guessIndent.js","../../../node_modules/magic-string/node_modules/vlq/src/vlq.js","../../../node_modules/magic-string/src/utils/encode.js","../../../node_modules/magic-string/src/MagicString/encodeMappings.js","../../../node_modules/magic-string/src/MagicString/index.js","../../01-babel/1/utils/ast/walk.js","../../01-babel/1/utils/mappers.js","../../01-babel/1/utils/ast/annotate.js","../../01-babel/1/utils/ast/findImportsAndExports.js","../../01-babel/1/utils/hasOwnProp.js","../../01-babel/1/utils/ast/getUnscopedNames.js","../../01-babel/1/utils/disallowConflictingImports.js","../../01-babel/1/utils/sanitize.js","../../01-babel/1/standalone/getModule.js","../../01-babel/1/standalone/builders/defaultsMode/utils/transformExportDeclaration.js","../../01-babel/1/utils/packageResult.js","../../01-babel/1/utils/resolveId.js","../../01-babel/1/utils/amd/getImportSummary.js","../../01-babel/1/utils/amd/processName.js","../../01-babel/1/utils/amd/processIds.js","../../01-babel/1/utils/amd/amdIntro.js","../../01-babel/1/standalone/builders/defaultsMode/amd.js","../../01-babel/1/standalone/builders/defaultsMode/cjs.js","../../01-babel/1/utils/umd/umdIntro.js","../../01-babel/1/utils/EsperantoError.js","../../01-babel/1/utils/umd/requireName.js","../../01-babel/1/standalone/builders/defaultsMode/umd.js","../../01-babel/1/standalone/builders/defaultsMode/index.js","../../01-babel/1/standalone/builders/strictMode/utils/gatherImports.js","../../01-babel/1/standalone/builders/strictMode/utils/getExportNames.js","../../01-babel/1/utils/getReadOnlyIdentifiers.js","../../01-babel/1/utils/ast/disallowIllegalReassignment.js","../../01-babel/1/utils/ast/replaceIdentifiers.js","../../01-babel/1/utils/ast/rewriteExportAssignments.js","../../01-babel/1/utils/ast/traverse.js","../../01-babel/1/standalone/builders/strictMode/utils/transformBody.js","../../01-babel/1/standalone/builders/strictMode/amd.js","../../01-babel/1/standalone/builders/strictMode/cjs.js","../../01-babel/1/standalone/builders/strictMode/umd.js","../../01-babel/1/standalone/builders/strictMode/index.js","../../01-babel/1/standalone/builders/index.js","../../01-babel/1/bundler/builders/defaultsMode/amd.js","../../01-babel/1/bundler/builders/defaultsMode/cjs.js","../../01-babel/1/bundler/builders/defaultsMode/umd.js","../../01-babel/1/bundler/builders/defaultsMode/index.js","../../01-babel/1/bundler/builders/strictMode/utils/getExportBlock.js","../../01-babel/1/bundler/builders/strictMode/amd.js","../../01-babel/1/bundler/builders/strictMode/cjs.js","../../01-babel/1/bundler/builders/strictMode/umd.js","../../01-babel/1/bundler/builders/strictMode/index.js","../../01-babel/1/bundler/builders/index.js","../../01-babel/1/bundler/builders/concat.js","../../01-babel/1/esperanto.js"],"sourcesContent":["export default hasNamedImports;\n\nfunction hasNamedImports(mod) {\n\tvar i = mod.imports.length;\n\n\twhile (i--) {\n\t\tif (mod.imports[i].isNamed) {\n\t\t\treturn true;\n\t\t}\n\t}\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/utils/hasNamedImports.js.01-babel.map","export default hasNamedExports;\n\nfunction hasNamedExports(mod) {\n\tvar i = mod.exports.length;\n\n\twhile (i--) {\n\t\tif (!mod.exports[i].isDefault) {\n\t\t\treturn true;\n\t\t}\n\t}\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/utils/hasNamedExports.js.01-babel.map","var _btoa;\n\nif ( typeof window !== 'undefined' && typeof window.btoa === 'function' ) {\n\t_btoa = window.btoa;\n} else if ( typeof Buffer === 'function' ) {\n\t_btoa = function ( str ) {\n\t\treturn new Buffer( str ).toString( 'base64' );\n\t};\n} else {\n\tthrow new Error( 'Unsupported environment: `window.btoa` or `Buffer` should be supported.' );\n}\n\nexport default _btoa;","import btoa from '../utils/btoa';\n\nvar SourceMap = function ( properties ) {\n\tthis.version = 3;\n\n\tthis.file           = properties.file;\n\tthis.sources        = properties.sources;\n\tthis.sourcesContent = properties.sourcesContent;\n\tthis.names          = properties.names;\n\tthis.mappings       = properties.mappings;\n};\n\nSourceMap.prototype = {\n\ttoString: function () {\n\t\treturn JSON.stringify( this );\n\t},\n\n\ttoUrl: function () {\n\t\treturn 'data:application/json;charset=utf-8;base64,' + btoa( this.toString() );\n\t}\n};\n\nexport default SourceMap;","export default function getRelativePath ( from, to ) {\n\tvar fromParts, toParts, i;\n\n\tfromParts = from.split( /[\\/\\\\]/ );\n\ttoParts = to.split( /[\\/\\\\]/ );\n\n\tfromParts.pop(); // get dirname\n\n\twhile ( fromParts[0] === toParts[0] ) {\n\t\tfromParts.shift();\n\t\ttoParts.shift();\n\t}\n\n\tif ( fromParts.length ) {\n\t\ti = fromParts.length;\n\t\twhile ( i-- ) fromParts[i] = '..';\n\t}\n\n\treturn fromParts.concat( toParts ).join( '/' );\n}\n","import SourceMap from '../SourceMap';\nimport getRelativePath from '../utils/getRelativePath';\n\nvar Bundle = function ( options ) {\n\toptions = options || {};\n\n\tthis.intro = options.intro || '';\n\tthis.outro = options.outro || '';\n\tthis.separator = 'separator' in options ? options.separator : '\\n';\n\n\tthis.sources = [];\n};\n\nBundle.prototype = {\n\taddSource: function ( source ) {\n\t\tif ( typeof source !== 'object' || !source.content ) {\n\t\t\tthrow new Error( 'bundle.addSource() takes an object with a `content` property, which should be an instance of MagicString, and an optional `filename`' );\n\t\t}\n\n\t\tthis.sources.push( source );\n\t\treturn this;\n\t},\n\n\tappend: function ( str ) {\n\t\tthis.outro += str;\n\t\treturn this;\n\t},\n\n\tclone: function () {\n\t\tvar bundle = new Bundle({\n\t\t\tintro: this.intro,\n\t\t\toutro: this.outro,\n\t\t\tseparator: this.separator\n\t\t});\n\n\t\tthis.sources.forEach( function ( source ) {\n\t\t\tbundle.addSource({\n\t\t\t\tfilename: source.filename,\n\t\t\t\tcontent: source.content.clone()\n\t\t\t});\n\t\t});\n\n\t\treturn bundle;\n\t},\n\n\tgenerateMap: function ( options ) {\n\t\tvar offsets = {}, encoded, encodingSeparator;\n\n\t\tencodingSeparator = getSemis( this.separator );\n\n\t\tencoded = (\n\t\t\tgetSemis( this.intro ) +\n\t\t\tthis.sources.map( function ( source, sourceIndex) {\n\t\t\t\treturn source.content.getMappings( options.hires, sourceIndex, offsets );\n\t\t\t}).join( encodingSeparator ) +\n\t\t\tgetSemis( this.outro )\n\t\t);\n\n\t\treturn new SourceMap({\n\t\t\tfile: ( options.file ? options.file.split( /[\\/\\\\]/ ).pop() : null ),\n\t\t\tsources: this.sources.map( function ( source ) {\n\t\t\t\treturn options.file ? getRelativePath( options.file, source.filename ) : source.filename;\n\t\t\t}),\n\t\t\tsourcesContent: this.sources.map( function ( source ) {\n\t\t\t\treturn options.includeContent ? source.content.original : null;\n\t\t\t}),\n\t\t\tnames: [],\n\t\t\tmappings: encoded\n\t\t});\n\t},\n\n\tgetIndentString: function () {\n\t\tvar indentStringCounts = {};\n\n\t\tthis.sources.forEach( function ( source ) {\n\t\t\tvar indentStr = source.content.indentStr;\n\n\t\t\tif ( indentStr === null ) return;\n\n\t\t\tif ( !indentStringCounts[ indentStr ] ) indentStringCounts[ indentStr ] = 0;\n\t\t\tindentStringCounts[ indentStr ] += 1;\n\t\t});\n\n\t\treturn ( Object.keys( indentStringCounts ).sort( function ( a, b ) {\n\t\t\treturn indentStringCounts[a] - indentStringCounts[b];\n\t\t})[0] ) || '\\t';\n\t},\n\n\tindent: function ( indentStr ) {\n\t\tif ( !indentStr ) {\n\t\t\tindentStr = this.getIndentString();\n\t\t}\n\n\t\tthis.sources.forEach( function ( source ) {\n\t\t\tsource.content.indent( indentStr, { exclude: source.indentExclusionRanges });\n\t\t});\n\n\t\tthis.intro = this.intro.replace( /^[^\\n]/gm, indentStr + '$&' );\n\t\tthis.outro = this.outro.replace( /^[^\\n]/gm, indentStr + '$&' );\n\n\t\treturn this;\n\t},\n\n\tprepend: function ( str ) {\n\t\tthis.intro = str + this.intro;\n\t\treturn this;\n\t},\n\n\ttoString: function () {\n\t\treturn this.intro + this.sources.map( stringify ).join( this.separator ) + this.outro;\n\t},\n\n\ttrimLines: function () {\n\t\treturn this.trim('[\\\\r\\\\n]');\n\t},\n\n\ttrim: function (charType) {\n\t\treturn this.trimStart(charType).trimEnd(charType);\n\t},\n\n\ttrimStart: function (charType) {\n\t\tvar rx = new RegExp('^' + (charType || '\\\\s') + '+');\n\t\tthis.intro = this.intro.replace( rx, '' );\n\n\t\tif ( !this.intro ) {\n\t\t\tvar source;\n\t\t\tvar i = 0;\n\t\t\tdo {\n\t\t\t\tsource = this.sources[i];\n\n\t\t\t\tif ( !source ) {\n\t\t\t\t\tthis.outro = this.outro.replace( rx, '' );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tsource.content.trimStart();\n\t\t\t\ti += 1;\n\t\t\t} while ( source.content.str === '' );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttrimEnd: function(charType) {\n\t\tvar rx = new RegExp((charType || '\\\\s') + '+$');\n\t\tthis.outro = this.outro.replace( rx, '' );\n\n\t\tif ( !this.outro ) {\n\t\t\tvar source;\n\t\t\tvar i = this.sources.length - 1;\n\t\t\tdo {\n\t\t\t\tsource = this.sources[i];\n\n\t\t\t\tif ( !source ) {\n\t\t\t\t\tthis.intro = this.intro.replace( rx, '' );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tsource.content.trimEnd(charType);\n\t\t\t\ti -= 1;\n\t\t\t} while ( source.content.str === '' );\n\t\t}\n\n\t\treturn this;\n\t}\n};\n\nexport default Bundle;\n\nfunction stringify ( source ) {\n\treturn source.content.toString();\n}\n\nfunction getSemis ( str ) {\n\treturn new Array( str.split( '\\n' ).length ).join( ';' );\n}\n","export default function guessIndent ( code ) {\n\tvar lines, tabbed, spaced, min;\n\n\tlines = code.split( '\\n' );\n\n\ttabbed = lines.filter( function ( line ) {\n\t\treturn /^\\t+/.test( line );\n\t});\n\n\tspaced = lines.filter( function ( line ) {\n\t\treturn /^ {2,}/.test( line );\n\t});\n\n\tif ( tabbed.length === 0 && spaced.length === 0 ) {\n\t\treturn null;\n\t}\n\n\t// More lines tabbed than spaced? Assume tabs, and\n\t// default to tabs in the case of a tie (or nothing\n\t// to go on)\n\tif ( tabbed.length >= spaced.length ) {\n\t\treturn '\\t';\n\t}\n\n\t// Otherwise, we need to guess the multiple\n\tmin = spaced.reduce( function ( previous, current ) {\n\t\tvar numSpaces = /^ +/.exec( current )[0].length;\n\t\treturn Math.min( numSpaces, previous );\n\t}, Infinity );\n\n\treturn new Array( min + 1 ).join( ' ' );\n}\n","var charToInteger = {};\nvar integerToChar = {};\n\n'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='.split( '' ).forEach( function ( char, i ) {\n\tcharToInteger[ char ] = i;\n\tintegerToChar[ i ] = char;\n});\n\nexport function decode ( string ) {\n\tvar result = [],\n\t\tlen = string.length,\n\t\ti,\n\t\thasContinuationBit,\n\t\tshift = 0,\n\t\tvalue = 0,\n\t\tinteger,\n\t\tshouldNegate;\n\n\tfor ( i = 0; i < len; i += 1 ) {\n\t\tinteger = charToInteger[ string[i] ];\n\n\t\tif ( integer === undefined ) {\n\t\t\tthrow new Error( 'Invalid character (' + string[i] + ')' );\n\t\t}\n\n\t\thasContinuationBit = integer & 32;\n\n\t\tinteger &= 31;\n\t\tvalue += integer << shift;\n\n\t\tif ( hasContinuationBit ) {\n\t\t\tshift += 5;\n\t\t} else {\n\t\t\tshouldNegate = value & 1;\n\t\t\tvalue >>= 1;\n\n\t\t\tresult.push( shouldNegate ? -value : value );\n\n\t\t\t// reset\n\t\t\tvalue = shift = 0;\n\t\t}\n\t}\n\n\treturn result;\n}\n\nexport function encode ( value ) {\n\tvar result, i;\n\n\tif ( typeof value === 'number' ) {\n\t\tresult = encodeInteger( value );\n\t} else {\n\t\tresult = '';\n\t\tfor ( i = 0; i < value.length; i += 1 ) {\n\t\t\tresult += encodeInteger( value[i] );\n\t\t}\n\t}\n\n\treturn result;\n}\n\nfunction encodeInteger ( num ) {\n\tvar result = '', clamped;\n\n\tif ( num < 0 ) {\n\t\tnum = ( -num << 1 ) | 1;\n\t} else {\n\t\tnum <<= 1;\n\t}\n\n\tdo {\n\t\tclamped = num & 31;\n\t\tnum >>= 5;\n\n\t\tif ( num > 0 ) {\n\t\t\tclamped |= 32;\n\t\t}\n\n\t\tresult += integerToChar[ clamped ];\n\t} while ( num > 0 );\n\n\treturn result;\n}\n","import { encode } from 'vlq';\nexport default encode;","import encode from '../utils/encode';\n\nexport default function encodeMappings ( original, str, mappings, hires, sourcemapLocations, sourceIndex, offsets ) {\n\tvar lineStart,\n\t\tlocations,\n\t\tlines,\n\t\tencoded,\n\t\tinverseMappings,\n\t\tcharOffset = 0,\n\t\tfirstSegment = true;\n\n\t// store locations, for fast lookup\n\tlineStart = 0;\n\tlocations = original.split( '\\n' ).map( function ( line ) {\n\t\tvar start = lineStart;\n\t\tlineStart += line.length + 1; // +1 for the newline\n\n\t\treturn start;\n\t});\n\n\tinverseMappings = invert( str, mappings );\n\n\tlines = str.split( '\\n' ).map( function ( line ) {\n\t\tvar segments, len, char, origin, lastOrigin, i, location;\n\n\t\tsegments = [];\n\n\t\tlen = line.length;\n\t\tfor ( i = 0; i < len; i += 1 ) {\n\t\t\tchar = i + charOffset;\n\t\t\torigin = inverseMappings[ char ];\n\n\t\t\tif ( !~origin ) {\n\t\t\t\tif ( !~lastOrigin ) {\n\t\t\t\t\t// do nothing\n\t\t\t\t} else {\n\t\t\t\t\tsegments.push({\n\t\t\t\t\t\tgeneratedCodeColumn: i,\n\t\t\t\t\t\tsourceIndex: sourceIndex,\n\t\t\t\t\t\tsourceCodeLine: 0,\n\t\t\t\t\t\tsourceCodeColumn: 0\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\tif ( !hires && ( origin === lastOrigin + 1 ) && !sourcemapLocations[ origin ] ) {\n\t\t\t\t\t// do nothing\n\t\t\t\t} else {\n\t\t\t\t\tlocation = getLocation( locations, origin );\n\n\t\t\t\t\tsegments.push({\n\t\t\t\t\t\tgeneratedCodeColumn: i,\n\t\t\t\t\t\tsourceIndex: sourceIndex,\n\t\t\t\t\t\tsourceCodeLine: location.line,\n\t\t\t\t\t\tsourceCodeColumn: location.column\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlastOrigin = origin;\n\t\t}\n\n\t\tcharOffset += line.length + 1;\n\t\treturn segments;\n\t});\n\n\toffsets = offsets || {};\n\n\toffsets.sourceIndex = offsets.sourceIndex || 0;\n\toffsets.sourceCodeLine = offsets.sourceCodeLine || 0;\n\toffsets.sourceCodeColumn = offsets.sourceCodeColumn || 0;\n\n\tencoded = lines.map( function ( segments ) {\n\t\tvar generatedCodeColumn = 0;\n\n\t\treturn segments.map( function ( segment ) {\n\t\t\tvar arr = [\n\t\t\t\tsegment.generatedCodeColumn - generatedCodeColumn,\n\t\t\t\tsegment.sourceIndex - offsets.sourceIndex,\n\t\t\t\tsegment.sourceCodeLine - offsets.sourceCodeLine,\n\t\t\t\tsegment.sourceCodeColumn - offsets.sourceCodeColumn\n\t\t\t];\n\n\t\t\tgeneratedCodeColumn = segment.generatedCodeColumn;\n\t\t\toffsets.sourceIndex = segment.sourceIndex;\n\t\t\toffsets.sourceCodeLine = segment.sourceCodeLine;\n\t\t\toffsets.sourceCodeColumn = segment.sourceCodeColumn;\n\n\t\t\tfirstSegment = false;\n\n\t\t\treturn encode( arr );\n\t\t}).join( ',' );\n\t}).join( ';' );\n\n\treturn encoded;\n}\n\n\nfunction invert ( str, mappings ) {\n\tvar inverted = new Uint32Array( str.length ), i;\n\n\t// initialise everything to -1\n\ti = str.length;\n\twhile ( i-- ) {\n\t\tinverted[i] = -1;\n\t}\n\n\t// then apply the actual mappings\n\ti = mappings.length;\n\twhile ( i-- ) {\n\t\tif ( ~mappings[i] ) {\n\t\t\tinverted[ mappings[i] ] = i;\n\t\t}\n\t}\n\n\treturn inverted;\n}\n\nfunction getLocation ( locations, char ) {\n\tvar i;\n\n\ti = locations.length;\n\twhile ( i-- ) {\n\t\tif ( locations[i] <= char ) {\n\t\t\treturn {\n\t\t\t\tline: i,\n\t\t\t\tcolumn: char - locations[i]\n\t\t\t};\n\t\t}\n\t}\n\n\tthrow new Error( 'Character out of bounds' );\n}\n","import Bundle from '../Bundle';\nimport SourceMap from '../SourceMap';\nimport guessIndent from './guessIndent';\nimport encodeMappings from './encodeMappings';\nimport getRelativePath from '../utils/getRelativePath';\n\nvar MagicString = function ( string ) {\n\tthis.original = this.str = string;\n\tthis.mappings = initMappings( string.length );\n\n\tthis.sourcemapLocations = {};\n\n\tthis.indentStr = guessIndent( string );\n};\n\nMagicString.prototype = {\n\taddSourcemapLocation: function ( char ) {\n\t\tthis.sourcemapLocations[ char ] = true;\n\t},\n\n\tappend: function ( content ) {\n\t\tif ( typeof content !== 'string' ) {\n\t\t\tthrow new TypeError( 'appended content must be a string' );\n\t\t}\n\n\t\tthis.str += content;\n\t\treturn this;\n\t},\n\n\tclone: function () {\n\t\tvar clone, i;\n\n\t\tclone = new MagicString( this.original );\n\t\tclone.str = this.str;\n\n\t\ti = clone.mappings.length;\n\t\twhile ( i-- ) {\n\t\t\tclone.mappings[i] = this.mappings[i];\n\t\t}\n\n\t\treturn clone;\n\t},\n\n\tgenerateMap: function ( options ) {\n\t\toptions = options || {};\n\n\t\treturn new SourceMap({\n\t\t\tfile: ( options.file ? options.file.split( /[\\/\\\\]/ ).pop() : null ),\n\t\t\tsources: [ options.source ? getRelativePath( options.file || '', options.source ) : null ],\n\t\t\tsourcesContent: options.includeContent ? [ this.original ] : [ null ],\n\t\t\tnames: [],\n\t\t\tmappings: this.getMappings( options.hires, 0 )\n\t\t});\n\t},\n\n\tgetIndentString: function () {\n\t\treturn this.indentStr === null ? '\\t' : this.indentStr;\n\t},\n\n\tgetMappings: function ( hires, sourceIndex, offsets ) {\n\t\treturn encodeMappings( this.original, this.str, this.mappings, hires, this.sourcemapLocations, sourceIndex, offsets );\n\t},\n\n\tindent: function ( indentStr, options ) {\n\t\tvar self = this,\n\t\t\tmappings = this.mappings,\n\t\t\treverseMappings = reverse( mappings, this.str.length ),\n\t\t\tpattern = /^[^\\r\\n]/gm,\n\t\t\tmatch,\n\t\t\tinserts = [],\n\t\t\tadjustments,\n\t\t\texclusions,\n\t\t\tlastEnd,\n\t\t\ti;\n\n\t\tif ( typeof indentStr === 'object' ) {\n\t\t\toptions = indentStr;\n\t\t\tindentStr = undefined;\n\t\t}\n\n\t\tindentStr = indentStr !== undefined ? indentStr : ( this.indentStr || '\\t' );\n\n\t\toptions = options || {};\n\n\t\t// Process exclusion ranges\n\t\tif ( options.exclude ) {\n\t\t\texclusions = typeof options.exclude[0] === 'number' ? [ options.exclude ] : options.exclude;\n\n\t\t\texclusions = exclusions.map( function ( range ) {\n\t\t\t\tvar rangeStart, rangeEnd;\n\n\t\t\t\trangeStart = self.locate( range[0] );\n\t\t\t\trangeEnd = self.locate( range[1] );\n\n\t\t\t\tif ( rangeStart === null || rangeEnd === null ) {\n\t\t\t\t\tthrow new Error( 'Cannot use indices of replaced characters as exclusion ranges' );\n\t\t\t\t}\n\n\t\t\t\treturn [ rangeStart, rangeEnd ];\n\t\t\t});\n\n\t\t\texclusions.sort( function ( a, b ) {\n\t\t\t\treturn a[0] - b[0];\n\t\t\t});\n\n\t\t\t// check for overlaps\n\t\t\tlastEnd = -1;\n\t\t\texclusions.forEach( function ( range ) {\n\t\t\t\tif ( range[0] < lastEnd ) {\n\t\t\t\t\tthrow new Error( 'Exclusion ranges cannot overlap' );\n\t\t\t\t}\n\n\t\t\t\tlastEnd = range[1];\n\t\t\t});\n\t\t}\n\n\t\tif ( !exclusions ) {\n\t\t\twhile ( match = pattern.exec( this.str ) ) {\n\t\t\t\tinserts.push( match.index );\n\t\t\t}\n\n\t\t\tthis.str = this.str.replace( pattern, indentStr + '$&' );\n\t\t} else {\n\t\t\twhile ( match = pattern.exec( this.str ) ) {\n\t\t\t\tif ( !isExcluded( match.index - 1 ) ) {\n\t\t\t\t\tinserts.push( match.index );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.str = this.str.replace( pattern, function ( match, index ) {\n\t\t\t\treturn isExcluded( index - 1 ) ? match : indentStr + match;\n\t\t\t});\n\t\t}\n\n\t\tadjustments = inserts.map( function ( index ) {\n\t\t\tvar origin;\n\n\t\t\tdo {\n\t\t\t\torigin = reverseMappings[ index++ ];\n\t\t\t} while ( !~origin && index < self.str.length );\n\n\t\t\treturn origin;\n\t\t});\n\n\t\ti = adjustments.length;\n\t\tlastEnd = this.mappings.length;\n\t\twhile ( i-- ) {\n\t\t\tadjust( self.mappings, adjustments[i], lastEnd, ( ( i + 1 ) * indentStr.length ) );\n\t\t\tlastEnd = adjustments[i];\n\t\t}\n\n\t\treturn this;\n\n\t\tfunction isExcluded ( index ) {\n\t\t\tvar i = exclusions.length, range;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\trange = exclusions[i];\n\n\t\t\t\tif ( range[1] < index ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif ( range[0] <= index ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tinsert: function ( index, content ) {\n\t\tif ( typeof content !== 'string' ) {\n\t\t\tthrow new TypeError( 'inserted content must be a string' );\n\t\t}\n\n\t\tif ( index === this.original.length ) {\n\t\t\tthis.append( content );\n\t\t} else {\n\t\t\tvar mapped = this.locate(index);\n\n\t\t\tif ( mapped === null ) {\n\t\t\t\tthrow new Error( 'Cannot insert at replaced character index: ' + index );\n\t\t\t}\n\n\t\t\tthis.str = this.str.substr( 0, mapped ) + content + this.str.substr( mapped );\n\t\t\tadjust( this.mappings, index, this.mappings.length, content.length );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t// get current location of character in original string\n\tlocate: function ( character ) {\n\t\tvar loc;\n\n\t\tif ( character < 0 || character > this.mappings.length ) {\n\t\t\tthrow new Error( 'Character is out of bounds' );\n\t\t}\n\n\t\tloc = this.mappings[ character ];\n\t\treturn ~loc ? loc : null;\n\t},\n\n\tlocateOrigin: function ( character ) {\n\t\tvar i;\n\n\t\tif ( character < 0 || character >= this.str.length ) {\n\t\t\tthrow new Error( 'Character is out of bounds' );\n\t\t}\n\n\t\ti = this.mappings.length;\n\t\twhile ( i-- ) {\n\t\t\tif ( this.mappings[i] === character ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\n\tprepend: function ( content ) {\n\t\tthis.str = content + this.str;\n\t\tadjust( this.mappings, 0, this.mappings.length, content.length );\n\t\treturn this;\n\t},\n\n\tremove: function ( start, end ) {\n\t\tvar loc, d, i, currentStart, currentEnd;\n\n\t\tif ( start < 0 || end > this.mappings.length ) {\n\t\t\tthrow new Error( 'Character is out of bounds' );\n\t\t}\n\n\t\td = 0;\n\t\tcurrentStart = -1;\n\t\tcurrentEnd = -1;\n\t\tfor ( i = start; i < end; i += 1 ) {\n\t\t\tloc = this.mappings[i];\n\n\t\t\tif ( loc !== -1 ) {\n\t\t\t\tif ( !~currentStart ) {\n\t\t\t\t\tcurrentStart = loc;\n\t\t\t\t}\n\n\t\t\t\tcurrentEnd = loc + 1;\n\n\t\t\t\tthis.mappings[i] = -1;\n\t\t\t\td += 1;\n\t\t\t}\n\t\t}\n\n\t\tthis.str = this.str.slice( 0, currentStart ) + this.str.slice( currentEnd );\n\n\t\tadjust( this.mappings, end, this.mappings.length, -d );\n\t\treturn this;\n\t},\n\n\treplace: function ( start, end, content ) {\n\t\tif ( typeof content !== 'string' ) {\n\t\t\tthrow new TypeError( 'replacement content must be a string' );\n\t\t}\n\n\t\tvar firstChar, lastChar, d;\n\n\t\tfirstChar = this.locate( start );\n\t\tlastChar = this.locate( end - 1 );\n\n\t\tif ( firstChar === null || lastChar === null ) {\n\t\t\tthrow new Error( 'Cannot replace the same content twice' );\n\t\t}\n\n\t\tif ( firstChar > lastChar + 1 ) {\n\t\t\tthrow new Error(\n\t\t\t\t'BUG! First character mapped to a position after the last character: ' +\n\t\t\t\t'[' + start + ', ' + end + '] -> [' + firstChar + ', ' + ( lastChar + 1 ) + ']'\n\t\t\t);\n\t\t}\n\n\t\tthis.str = this.str.substr( 0, firstChar ) + content + this.str.substring( lastChar + 1 );\n\n\t\td = content.length - ( lastChar + 1 - firstChar );\n\n\t\tblank( this.mappings, start, end );\n\t\tadjust( this.mappings, end, this.mappings.length, d );\n\t\treturn this;\n\t},\n\n\tslice: function ( start, end ) {\n\t\tvar firstChar, lastChar;\n\n\t\tfirstChar = this.locate( start );\n\t\tlastChar = this.locate( end - 1 ) + 1;\n\n\t\tif ( firstChar === null || lastChar === null ) {\n\t\t\tthrow new Error( 'Cannot use replaced characters as slice anchors' );\n\t\t}\n\n\t\treturn this.str.slice( firstChar, lastChar );\n\t},\n\n\ttoString: function () {\n\t\treturn this.str;\n\t},\n\n\ttrimLines: function() {\n\t\treturn this.trim('[\\\\r\\\\n]');\n\t},\n\n\ttrim: function (charType) {\n\t\treturn this.trimStart(charType).trimEnd(charType);\n\t},\n\n\ttrimEnd: function (charType) {\n\t\tvar self = this;\n\t\tvar rx = new RegExp((charType || '\\\\s') + '+$');\n\n\t\tthis.str = this.str.replace( rx, function ( trailing, index, str ) {\n\t\t\tvar strLength = str.length,\n\t\t\t\tlength = trailing.length,\n\t\t\t\ti,\n\t\t\t\tchars = [];\n\n\t\t\ti = strLength;\n\t\t\twhile ( i-- > strLength - length ) {\n\t\t\t\tchars.push( self.locateOrigin( i ) );\n\t\t\t}\n\n\t\t\ti = chars.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( chars[i] !== null ) {\n\t\t\t\t\tself.mappings[ chars[i] ] = -1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn '';\n\t\t});\n\n\t\treturn this;\n\t},\n\n\ttrimStart: function (charType) {\n\t\tvar self = this;\n\t\tvar rx = new RegExp('^' + (charType || '\\\\s') + '+');\n\n\t\tthis.str = this.str.replace( rx, function ( leading ) {\n\t\t\tvar length = leading.length, i, chars = [], adjustmentStart = 0;\n\n\t\t\ti = length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tchars.push( self.locateOrigin( i ) );\n\t\t\t}\n\n\t\t\ti = chars.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( chars[i] !== null ) {\n\t\t\t\t\tself.mappings[ chars[i] ] = -1;\n\t\t\t\t\tadjustmentStart += 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tadjust( self.mappings, adjustmentStart, self.mappings.length, -length );\n\n\t\t\treturn '';\n\t\t});\n\n\t\treturn this;\n\t}\n};\n\nMagicString.Bundle = Bundle;\n\nfunction adjust ( mappings, start, end, d ) {\n\tvar i = end;\n\n\tif ( !d ) return; // replacement is same length as replaced string\n\n\twhile ( i-- > start ) {\n\t\tif ( ~mappings[i] ) {\n\t\t\tmappings[i] += d;\n\t\t}\n\t}\n}\n\nfunction initMappings ( i ) {\n\tvar mappings = new Uint32Array( i );\n\n\twhile ( i-- ) {\n\t\tmappings[i] = i;\n\t}\n\n\treturn mappings;\n}\n\nfunction blank ( mappings, start, i ) {\n\twhile ( i-- > start ) {\n\t\tmappings[i] = -1;\n\t}\n}\n\nfunction reverse ( mappings, i ) {\n\tvar result, location;\n\n\tresult = new Uint32Array( i );\n\n\twhile ( i-- ) {\n\t\tresult[i] = -1;\n\t}\n\n\ti = mappings.length;\n\twhile ( i-- ) {\n\t\tlocation = mappings[i];\n\n\t\tif ( ~location ) {\n\t\t\tresult[ location ] = i;\n\t\t}\n\t}\n\n\treturn result;\n}\n\nexport default MagicString;\n","\n\nexport default walk;\n\nvar shouldSkip = undefined;\nvar shouldAbort = undefined;\nfunction walk(ast, _ref) {\n\tvar enter = _ref.enter;\n\tvar leave = _ref.leave;\n\n\tshouldAbort = false;\n\tvisit(ast, null, enter, leave);\n}\n\nvar context = {\n\tskip: function () {\n\t\treturn shouldSkip = true;\n\t},\n\tabort: function () {\n\t\treturn shouldAbort = true;\n\t}\n};\n\nvar childKeys = {};\n\nvar toString = Object.prototype.toString;\n\nfunction isArray(thing) {\n\treturn toString.call(thing) === '[object Array]';\n}\n\nfunction visit(node, parent, enter, leave) {\n\tif (!node || shouldAbort) return;\n\n\tif (enter) {\n\t\tshouldSkip = false;\n\t\tenter.call(context, node, parent);\n\t\tif (shouldSkip || shouldAbort) return;\n\t}\n\n\tvar keys = childKeys[node.type] || (childKeys[node.type] = Object.keys(node).filter(function (key) {\n\t\treturn typeof node[key] === 'object';\n\t}));\n\n\tvar key = undefined,\n\t    value = undefined,\n\t    i = undefined,\n\t    j = undefined;\n\n\ti = keys.length;\n\twhile (i--) {\n\t\tkey = keys[i];\n\t\tvalue = node[key];\n\n\t\tif (isArray(value)) {\n\t\t\tj = value.length;\n\t\t\twhile (j--) {\n\t\t\t\tvisit(value[j], node, enter, leave);\n\t\t\t}\n\t\t} else if (value && value.type) {\n\t\t\tvisit(value, node, enter, leave);\n\t\t}\n\t}\n\n\tif (leave && !shouldAbort) {\n\t\tleave(node, parent);\n\t}\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/utils/ast/walk.js.01-babel.map","export { getId };\n\nexport { getName };\n\nexport { quote };\n\nexport { req };\n\nexport { globalify };\n\nfunction getId(m) {\n\treturn m.id;\n}\n\nfunction getName(m) {\n\treturn m.name;\n}\n\nfunction quote(str) {\n\treturn \"'\" + JSON.stringify(str).slice(1, -1).replace(/'/g, \"\\\\'\") + \"'\";\n}\n\nfunction req(path) {\n\treturn \"require(\" + quote(path) + \")\";\n}\n\nfunction globalify(name) {\n\tif (/^__dep\\d+__$/.test(name)) {\n\t\treturn \"undefined\";\n\t} else {\n\t\treturn \"global.\" + name;\n\t}\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/utils/mappers.js.01-babel.map","\n\nexport default annotateAst;\n/*\n\tThis module traverse a module's AST, attaching scope information\n\tto nodes as it goes, which is later used to determine which\n\tidentifiers need to be rewritten to avoid collisions\n*/\n\nimport walk from './walk';\nimport { getName } from '../mappers';\n\nfunction Scope(options) {\n\toptions = options || {};\n\n\tthis.parent = options.parent;\n\tthis.names = options.params || [];\n}\n\nScope.prototype = {\n\tadd: function (name) {\n\t\tif (! ~this.names.indexOf(name)) // redeclaration of existing binding\n\t\t\tthis.names.push(name);\n\t},\n\n\tcontains: function (name, ignoreTopLevel) {\n\t\tif (ignoreTopLevel && !this.parent) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (~this.names.indexOf(name)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this.parent) {\n\t\t\treturn this.parent.contains(name, ignoreTopLevel);\n\t\t}\n\n\t\treturn false;\n\t}\n};\nfunction annotateAst(ast, options) {\n\tvar trackAssignments = options && options.trackAssignments;\n\n\tvar scope = new Scope();\n\tvar blockScope = new Scope();\n\tvar declared = {};\n\tvar topLevelFunctionNames = [];\n\tvar templateLiteralRanges = [];\n\n\tvar envDepth = 0;\n\n\twalk(ast, {\n\t\tenter: function (node) {\n\t\t\tif (node.type === 'ImportDeclaration' || node.type === 'ExportSpecifier') {\n\t\t\t\tnode._skip = true;\n\t\t\t}\n\n\t\t\tif (node._skip) {\n\t\t\t\treturn this.skip();\n\t\t\t}\n\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'FunctionExpression':\n\t\t\t\tcase 'FunctionDeclaration':\n\n\t\t\t\t\tenvDepth += 1;\n\n\t\t\t\t// fallthrough\n\n\t\t\t\tcase 'ArrowFunctionExpression':\n\t\t\t\t\tif (node.id) {\n\t\t\t\t\t\taddToScope(node);\n\n\t\t\t\t\t\t// If this is the root scope, this may need to be\n\t\t\t\t\t\t// exported early, so we make a note of it\n\t\t\t\t\t\tif (!scope.parent && node.type === 'FunctionDeclaration') {\n\t\t\t\t\t\t\ttopLevelFunctionNames.push(node.id.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvar names = node.params.map(getName);\n\n\t\t\t\t\tnames.forEach(function (name) {\n\t\t\t\t\t\treturn declared[name] = true;\n\t\t\t\t\t});\n\n\t\t\t\t\tscope = node._scope = new Scope({\n\t\t\t\t\t\tparent: scope,\n\t\t\t\t\t\tparams: names // TODO rest params?\n\t\t\t\t\t});\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'BlockStatement':\n\t\t\t\t\tblockScope = node._blockScope = new Scope({\n\t\t\t\t\t\tparent: blockScope\n\t\t\t\t\t});\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'VariableDeclaration':\n\t\t\t\t\tnode.declarations.forEach(node.kind === 'let' ? addToBlockScope : addToScope);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ClassExpression':\n\t\t\t\tcase 'ClassDeclaration':\n\t\t\t\t\taddToScope(node);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'MemberExpression':\n\t\t\t\t\t!node.computed && (node.property._skip = true);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Property':\n\t\t\t\t\tnode.key._skip = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'TemplateLiteral':\n\t\t\t\t\ttemplateLiteralRanges.push([node.start, node.end]);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ThisExpression':\n\t\t\t\t\tif (envDepth === 0) {\n\t\t\t\t\t\tnode._topLevel = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AssignmentExpression':\n\t\t\t\t\tassignTo(node.left);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'UpdateExpression':\n\t\t\t\t\tassignTo(node.argument);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\t\tleave: function (node) {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'FunctionExpression':\n\t\t\t\tcase 'FunctionDeclaration':\n\n\t\t\t\t\tenvDepth -= 1;\n\n\t\t\t\t// fallthrough\n\n\t\t\t\tcase 'ArrowFunctionExpression':\n\n\t\t\t\t\tscope = scope.parent;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'BlockStatement':\n\t\t\t\t\tblockScope = blockScope.parent;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction assignTo(node) {\n\t\tif (trackAssignments && node.type === 'Identifier' && node.name === trackAssignments.name) {\n\t\t\t// This is possibly somewhat hacky. Open to alternative approaches...\n\t\t\t// It will yield false positives if `foo` in `export default foo` is shadowed\n\t\t\t(trackAssignments._assignments || (trackAssignments._assignments = [])).push({\n\t\t\t\tscope: scope,\n\t\t\t\tnode: node\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction addToScope(declarator) {\n\t\tvar name = declarator.id.name;\n\n\t\tscope.add(name);\n\t\tdeclared[name] = true;\n\t}\n\n\tfunction addToBlockScope(declarator) {\n\t\tvar name = declarator.id.name;\n\n\t\tblockScope.add(name);\n\t\tdeclared[name] = true;\n\t}\n\n\tast._scope = scope;\n\tast._blockScope = blockScope;\n\tast._topLevelNames = ast._scope.names.concat(ast._blockScope.names);\n\tast._topLevelFunctionNames = topLevelFunctionNames;\n\tast._declared = declared;\n\tast._templateLiteralRanges = templateLiteralRanges;\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/utils/ast/annotate.js.01-babel.map","\nexport default findImportsAndExports;\n\n/**\n * Inspects a module and discovers/categorises import & export declarations\n * @param {object} ast - the result of parsing `source` with acorn\n * @param {string} source - the module's original source code\n * @param {array} comments - {start, end} position of comments\n * @returns {object} - { imports, exports, defaultExport }\n */\nfunction findImportsAndExports(ast, source, comments) {\n\tvar imports = [];\n\tvar exports = [];\n\tvar defaultExport = undefined;\n\tvar previousDeclaration = undefined;\n\n\tast.body.forEach(function (node) {\n\t\tvar passthrough, declaration;\n\n\t\tif (previousDeclaration) {\n\t\t\tif (previousDeclaration.node.type === 'ImportDeclaration' && node.type !== 'ImportDeclaration') {\n\t\t\t\t// For last import statement, next declaration starts at next comment or node, whichever is closest\n\t\t\t\tvar nextComment = undefined;\n\t\t\t\tfor (var i = 0, len = comments.length; i < len; i++) {\n\t\t\t\t\tif (comments[i].start > previousDeclaration.end) {\n\t\t\t\t\t\tnextComment = comments[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (nextComment && nextComment.start < node.start) {\n\t\t\t\t\tpreviousDeclaration.next = nextComment.start;\n\t\t\t\t} else {\n\t\t\t\t\tpreviousDeclaration.next = node.start;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpreviousDeclaration.next = node.start;\n\t\t\t}\n\n\t\t\tif (node.type !== 'EmptyStatement') {\n\t\t\t\tpreviousDeclaration = null;\n\t\t\t}\n\t\t}\n\n\t\tif (node.type === 'ImportDeclaration') {\n\t\t\tdeclaration = processImport(node);\n\t\t\timports.push(declaration);\n\t\t} else if (node.type === 'ExportDefaultDeclaration') {\n\t\t\tdeclaration = processDefaultExport(node, source);\n\t\t\texports.push(declaration);\n\n\t\t\tif (defaultExport) {\n\t\t\t\tthrow new Error('Duplicate default exports');\n\t\t\t}\n\t\t\tdefaultExport = declaration;\n\t\t} else if (node.type === 'ExportNamedDeclaration') {\n\t\t\tdeclaration = processExport(node, source);\n\t\t\texports.push(declaration);\n\n\t\t\tif (node.source) {\n\t\t\t\t// it's both an import and an export, e.g.\n\t\t\t\t// `export { foo } from './bar';\n\t\t\t\tpassthrough = processImport(node, true);\n\n\t\t\t\tpassthrough.specifiers.forEach(function (e) {\n\t\t\t\t\t// the import in `export { default } from 'foo';`\n\t\t\t\t\t// is a default import\n\t\t\t\t\tif (e.name === 'default') {\n\t\t\t\t\t\te.isDefault = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\timports.push(passthrough);\n\n\t\t\t\tdeclaration.passthrough = passthrough;\n\t\t\t}\n\t\t}\n\n\t\tif (declaration) {\n\t\t\tpreviousDeclaration = declaration;\n\t\t}\n\t});\n\n\t// catch any trailing semicolons\n\tif (previousDeclaration) {\n\t\tpreviousDeclaration.next = source.length;\n\t\tpreviousDeclaration.isFinal = true;\n\t}\n\n\treturn { imports: imports, exports: exports, defaultExport: defaultExport };\n}\n\n/**\n * Generates a representation of an import declaration\n * @param {object} node - the original AST node\n * @param {boolean} passthrough - `true` if this is an `export { foo } from 'bar'`-style declaration\n * @returns {object}\n */\nfunction processImport(node, passthrough) {\n\tvar x = {\n\t\tmodule: null, // used by bundler - filled in later\n\t\tnode: node,\n\t\tstart: node.start,\n\t\tend: node.end,\n\t\tpassthrough: !!passthrough,\n\n\t\tpath: node.source.value,\n\t\tspecifiers: node.specifiers.map(function (s) {\n\t\t\tif (s.type === 'ImportNamespaceSpecifier') {\n\t\t\t\treturn {\n\t\t\t\t\tisBatch: true,\n\t\t\t\t\tname: s.local.name, // TODO is this line necessary?\n\t\t\t\t\tas: s.local.name,\n\t\t\t\t\torigin: null // filled in later by bundler\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (s.type === 'ImportDefaultSpecifier') {\n\t\t\t\treturn {\n\t\t\t\t\tisDefault: true,\n\t\t\t\t\tname: 'default',\n\t\t\t\t\tas: s.local.name,\n\t\t\t\t\torigin: null\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tname: (!!passthrough ? s.exported : s.imported).name,\n\t\t\t\tas: s.local.name,\n\t\t\t\torigin: null\n\t\t\t};\n\t\t})\n\t};\n\n\t// TODO have different types of imports - batch, default, named\n\tif (x.specifiers.length === 0) {\n\t\tx.isEmpty = true;\n\t} else if (x.specifiers.length === 1 && x.specifiers[0].isDefault) {\n\t\tx.isDefault = true;\n\t\tx.as = x.specifiers[0].as;\n\t} else if (x.specifiers.length === 1 && x.specifiers[0].isBatch) {\n\t\tx.isBatch = true;\n\t\tx.as = x.specifiers[0].name;\n\t} else {\n\t\tx.isNamed = true;\n\t}\n\n\treturn x;\n}\n\nfunction processDefaultExport(node, source) {\n\tvar d = node.declaration;\n\n\tvar result = {\n\t\tnode: node,\n\t\tisDefault: true,\n\t\tstart: node.start,\n\t\tend: node.end,\n\t\tvalue: source.slice(d.start, d.end),\n\t\tvalueStart: d.start,\n\t\thasDeclaration: null,\n\t\ttype: null,\n\t\tname: null\n\t};\n\n\t// possible declaration types:\n\t//   * FunctionExpression  - `export default function () {...}`\n\t//   * FunctionDeclaration - `export default function foo () {...}`\n\t//   * ClassExpression     - `export default class {...}`\n\t//   * ClassDeclaration    - `export default class Foo {...}`\n\tvar match = /^(Function|Class)(Declaration)?/.exec(d.type);\n\n\tif (match) {\n\t\tresult.hasDeclaration = true;\n\t\tresult.type = (match[2] ? 'named' : 'anon') + match[1];\n\n\t\tif (match[2]) {\n\t\t\tresult.name = d.id.name;\n\t\t}\n\t}\n\n\t// if no match, we have an expression like `export default whatever`\n\telse {\n\t\tresult.type = 'expression';\n\t\tresult.name = 'default';\n\t}\n\n\treturn result;\n}\n\n/**\n * Generates a representation of an export declaration\n * @param {object} node - the original AST node\n * @param {string} source - the original source code\n * @returns {object}\n */\nfunction processExport(node, source) {\n\tvar result = {\n\t\tnode: node,\n\t\tstart: node.start,\n\t\tend: node.end,\n\t\tvalue: null,\n\t\tvalueStart: null,\n\t\thasDeclaration: null,\n\t\ttype: null,\n\t\tname: null,\n\t\tspecifiers: null\n\t};\n\n\tvar d = node.declaration;\n\n\tif (d) {\n\t\tresult.hasDeclaration = true;\n\t\tresult.value = source.slice(d.start, d.end);\n\t\tresult.valueStart = d.start;\n\n\t\t// Case 1: `export var foo = 'bar'`\n\t\tif (d.type === 'VariableDeclaration') {\n\t\t\tresult.type = 'varDeclaration';\n\t\t\tresult.name = d.declarations[0].id.name;\n\t\t}\n\n\t\t// Case 2: `export function foo () {...}`\n\t\telse if (d.type === 'FunctionDeclaration') {\n\t\t\tresult.type = 'namedFunction';\n\t\t\tresult.name = d.id.name;\n\t\t}\n\n\t\t// Case 3: `export class Foo {...}`\n\t\telse if (d.type === 'ClassDeclaration') {\n\t\t\tresult.type = 'namedClass';\n\t\t\tresult.name = d.id.name;\n\t\t}\n\t}\n\n\t// Case 9: `export { foo, bar };`\n\telse {\n\t\tresult.type = 'named';\n\t\tresult.specifiers = node.specifiers.map(function (s) {\n\t\t\treturn {\n\t\t\t\torigin: null, // filled in later by bundler\n\t\t\t\tname: s.local.name,\n\t\t\t\tas: s.exported.name\n\t\t\t};\n\t\t});\n\t}\n\n\treturn result;\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/utils/ast/findImportsAndExports.js.01-babel.map","var hasOwnProp = Object.prototype.hasOwnProperty;\nexport default hasOwnProp;\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/utils/hasOwnProp.js.01-babel.map","\n\nexport default getUnscopedNames;\nimport walk from './walk';\nimport hasOwnProp from 'utils/hasOwnProp';\nfunction getUnscopedNames(mod) {\n\tvar unscoped = [],\n\t    importedNames,\n\t    scope;\n\n\tfunction imported(name) {\n\t\tif (!importedNames) {\n\t\t\timportedNames = {};\n\t\t\tmod.imports.forEach(function (i) {\n\t\t\t\t!i.passthrough && i.specifiers.forEach(function (s) {\n\t\t\t\t\timportedNames[s.as] = true;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\treturn hasOwnProp.call(importedNames, name);\n\t}\n\n\twalk(mod.ast, {\n\t\tenter: function (node) {\n\t\t\t// we're only interested in references, not property names etc\n\t\t\tif (node._skip) return this.skip();\n\n\t\t\tif (node._scope) {\n\t\t\t\tscope = node._scope;\n\t\t\t}\n\n\t\t\tif (node.type === 'Identifier' && !scope.contains(node.name) && !imported(node.name) && ! ~unscoped.indexOf(node.name)) {\n\t\t\t\tunscoped.push(node.name);\n\t\t\t}\n\t\t},\n\n\t\tleave: function (node) {\n\t\t\tif (node.type === 'Program') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (node._scope) {\n\t\t\t\tscope = scope.parent;\n\t\t\t}\n\t\t}\n\t});\n\n\treturn unscoped;\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/utils/ast/getUnscopedNames.js.01-babel.map","\n\nexport default disallowConflictingImports;\nimport hasOwnProp from './hasOwnProp';\nfunction disallowConflictingImports(imports) {\n\tvar usedNames = {};\n\n\timports.forEach(function (x) {\n\t\tif (x.passthrough) return;\n\n\t\tif (x.as) {\n\t\t\tcheckName(x.as);\n\t\t} else {\n\t\t\tx.specifiers.forEach(checkSpecifier);\n\t\t}\n\t});\n\n\tfunction checkSpecifier(s) {\n\t\tcheckName(s.as);\n\t}\n\n\tfunction checkName(name) {\n\t\tif (hasOwnProp.call(usedNames, name)) {\n\t\t\tthrow new SyntaxError('Duplicated import (\\'' + name + '\\')');\n\t\t}\n\n\t\tusedNames[name] = true;\n\t}\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/utils/disallowConflictingImports.js.01-babel.map","\nexport default sanitize;\n\nexport { splitPath };\nvar RESERVED = 'break case class catch const continue debugger default delete do else export extends finally for function if import in instanceof let new return super switch this throw try typeof var void while with yield'.split(' ');\nvar INVALID_CHAR = /[^a-zA-Z0-9_$]/g;\nvar INVALID_LEADING_CHAR = /[^a-zA-Z_$]/;\n\n/**\n * Generates a sanitized (i.e. valid identifier) name from a module ID\n * @param {string} id - a module ID, or part thereof\n * @returns {string}\n */\nfunction sanitize(name) {\n\tname = name.replace(INVALID_CHAR, '_');\n\n\tif (INVALID_LEADING_CHAR.test(name[0]) || ~RESERVED.indexOf(name)) {\n\t\tname = '_' + name;\n\t}\n\n\treturn name;\n}\n\nvar pathSplitRE = /\\/|\\\\/;\nfunction splitPath(path) {\n\treturn path.split(pathSplitRE);\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/utils/sanitize.js.01-babel.map","\n\nexport default getStandaloneModule;\n\nimport { parse } from 'acorn';\nimport MagicString from 'magic-string';\nimport annotateAst from 'utils/ast/annotate';\nimport findImportsAndExports from 'utils/ast/findImportsAndExports';\nimport getUnscopedNames from 'utils/ast/getUnscopedNames';\nimport disallowConflictingImports from '../utils/disallowConflictingImports';\nimport hasOwnProp from 'utils/hasOwnProp';\nimport { default as sanitize, splitPath } from 'utils/sanitize';\n\nvar SOURCEMAPPINGURL_REGEX = /^# sourceMappingURL=/;\nfunction getStandaloneModule(options) {\n\tvar code = undefined,\n\t    ast = undefined;\n\n\tif (typeof options.source === 'object') {\n\t\tcode = options.source.code;\n\t\tast = options.source.ast;\n\t} else {\n\t\tcode = options.source;\n\t}\n\n\tvar toRemove = [];\n\tvar comments = [];\n\n\tvar mod = {\n\t\tbody: new MagicString(code),\n\t\tast: ast || parse(code, {\n\t\t\tecmaVersion: 6,\n\t\t\tsourceType: 'module',\n\t\t\tonComment: function (block, text, start, end) {\n\t\t\t\t// sourceMappingURL comments should be removed\n\t\t\t\tif (!block && SOURCEMAPPINGURL_REGEX.test(text)) {\n\t\t\t\t\ttoRemove.push({ start: start, end: end });\n\t\t\t\t} else {\n\t\t\t\t\tcomments.push({ start: start, end: end });\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t};\n\n\ttoRemove.forEach(function (_ref) {\n\t\tvar start = _ref.start;\n\t\tvar end = _ref.end;\n\t\treturn mod.body.remove(start, end);\n\t});\n\n\tvar _findImportsAndExports = findImportsAndExports(mod.ast, code, comments);\n\n\tvar imports = _findImportsAndExports.imports;\n\tvar exports = _findImportsAndExports.exports;\n\tvar defaultExport = _findImportsAndExports.defaultExport;\n\n\tdisallowConflictingImports(imports);\n\n\tmod.imports = imports;\n\tmod.exports = exports;\n\tmod.defaultExport = defaultExport;\n\n\tvar conflicts = {};\n\n\tif (options.strict) {\n\t\tannotateAst(mod.ast, {\n\t\t\ttrackAssignments: null\n\t\t});\n\n\t\t// TODO there's probably an easier way to get this array\n\t\tObject.keys(mod.ast._declared).concat(getUnscopedNames(mod)).forEach(function (n) {\n\t\t\tconflicts[n] = true;\n\t\t});\n\t}\n\n\tdetermineImportNames(imports, options.getModuleName, conflicts);\n\n\treturn mod;\n}\n\nfunction determineImportNames(imports, userFn, usedNames) {\n\tvar nameById = {};\n\tvar inferredNames = {};\n\n\timports.forEach(function (x) {\n\t\tvar moduleId = x.path;\n\t\tvar name = undefined;\n\n\t\tmoduleId = x.path;\n\n\t\t// use existing value\n\t\tif (hasOwnProp.call(nameById, moduleId)) {\n\t\t\tx.name = nameById[moduleId];\n\t\t\treturn;\n\t\t}\n\n\t\t// if user supplied a function, defer to it\n\t\tif (userFn && (name = userFn(moduleId))) {\n\t\t\tname = sanitize(name);\n\n\t\t\tif (hasOwnProp.call(usedNames, name)) {\n\t\t\t\t// TODO write a test for this\n\t\t\t\tthrow new Error('Naming collision: module ' + moduleId + ' cannot be called ' + name);\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = splitPath(moduleId);\n\t\t\tvar i = undefined;\n\t\t\tvar prefix = '';\n\t\t\tvar candidate = undefined;\n\n\t\t\tdo {\n\t\t\t\ti = parts.length;\n\t\t\t\twhile (i-- > 0) {\n\t\t\t\t\tcandidate = prefix + sanitize(parts.slice(i).join('__'));\n\n\t\t\t\t\tif (!hasOwnProp.call(usedNames, candidate)) {\n\t\t\t\t\t\tname = candidate;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tprefix += '_';\n\t\t\t} while (!name);\n\t\t}\n\n\t\tusedNames[name] = true;\n\t\tnameById[moduleId] = name;\n\n\t\tx.name = name;\n\t});\n\n\t// use inferred names for default imports, wherever they\n\t// don't clash with path-based names\n\timports.forEach(function (x) {\n\t\tif (x.as && !hasOwnProp.call(usedNames, x.as)) {\n\t\t\tinferredNames[x.path] = x.as;\n\t\t}\n\t});\n\n\timports.forEach(function (x) {\n\t\tif (hasOwnProp.call(inferredNames, x.path)) {\n\t\t\tx.name = inferredNames[x.path];\n\t\t}\n\t});\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/standalone/getModule.js.01-babel.map","export default transformExportDeclaration;\n\nfunction transformExportDeclaration(declaration, body) {\n\tif (!declaration) {\n\t\treturn;\n\t}\n\n\tvar exportedValue = undefined;\n\n\tswitch (declaration.type) {\n\t\tcase 'namedFunction':\n\t\tcase 'namedClass':\n\t\t\tbody.remove(declaration.start, declaration.valueStart);\n\t\t\texportedValue = declaration.name;\n\t\t\tbreak;\n\n\t\tcase 'anonFunction':\n\t\tcase 'anonClass':\n\t\t\tif (declaration.isFinal) {\n\t\t\t\tbody.replace(declaration.start, declaration.valueStart, 'return ');\n\t\t\t} else {\n\t\t\t\tbody.replace(declaration.start, declaration.valueStart, 'var __export = ');\n\t\t\t\texportedValue = '__export';\n\t\t\t}\n\n\t\t\t// add semi-colon, if necessary\n\t\t\t// TODO body.original is an implementation detail of magic-string - there\n\t\t\t// should probably be an API for this sort of thing\n\t\t\tif (body.original[declaration.end - 1] !== ';') {\n\t\t\t\tbody.insert(declaration.end, ';');\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase 'expression':\n\t\t\tbody.remove(declaration.start, declaration.next);\n\t\t\texportedValue = declaration.value;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow new Error('Unexpected export type \\'' + declaration.type + '\\'');\n\t}\n\n\tif (exportedValue) {\n\t\tbody.append('\\nreturn ' + exportedValue + ';');\n\t}\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/standalone/builders/defaultsMode/utils/transformExportDeclaration.js.01-babel.map","\n\nexport default packageResult;\n\nimport walk from './ast/walk';\nimport { splitPath } from 'utils/sanitize';\n\nvar ABSOLUTE_PATH = /^(?:[A-Z]:)?[\\/\\\\]/i;\n\nvar warned = {};\nfunction packageResult(bundleOrModule, body, options, methodName, isBundle) {\n\t// wrap output\n\tif (options.banner) body.prepend(options.banner);\n\tif (options.footer) body.append(options.footer);\n\n\tvar code = body.toString();\n\tvar map = undefined;\n\n\tif (!!options.sourceMap) {\n\t\tif (options.sourceMap !== 'inline' && !options.sourceMapFile) {\n\t\t\tthrow new Error('You must provide `sourceMapFile` option');\n\t\t}\n\n\t\tif (!isBundle && !options.sourceMapSource) {\n\t\t\tthrow new Error('You must provide `sourceMapSource` option');\n\t\t}\n\n\t\tvar sourceMapFile = undefined;\n\t\tif (options.sourceMap === 'inline') {\n\t\t\tsourceMapFile = null;\n\t\t} else {\n\t\t\tsourceMapFile = ABSOLUTE_PATH.test(options.sourceMapFile) ? options.sourceMapFile : './' + splitPath(options.sourceMapFile).pop();\n\t\t}\n\n\t\tif (isBundle) {\n\t\t\tmarkBundleSourcemapLocations(bundleOrModule);\n\t\t} else {\n\t\t\tmarkModuleSourcemapLocations(bundleOrModule);\n\t\t}\n\n\t\tmap = body.generateMap({\n\t\t\tincludeContent: true,\n\t\t\tfile: sourceMapFile,\n\t\t\tsource: sourceMapFile && !isBundle ? getRelativePath(sourceMapFile, options.sourceMapSource) : null\n\t\t});\n\n\t\tif (options.sourceMap === 'inline') {\n\t\t\tcode += '\\n//# sourceMa' + 'ppingURL=' + map.toUrl();\n\t\t\tmap = null;\n\t\t} else {\n\t\t\tcode += '\\n//# sourceMa' + 'ppingURL=' + sourceMapFile + '.map';\n\t\t}\n\t} else {\n\t\tmap = null;\n\t}\n\n\treturn {\n\t\tcode: code,\n\t\tmap: map,\n\t\ttoString: function () {\n\t\t\tif (!warned[methodName]) {\n\t\t\t\tconsole.log('Warning: esperanto.' + methodName + '() returns an object with a \\'code\\' property. You should use this instead of using the returned value directly');\n\t\t\t\twarned[methodName] = true;\n\t\t\t}\n\n\t\t\treturn code;\n\t\t}\n\t};\n}\n\nfunction getRelativePath(from, to) {\n\tvar fromParts, toParts, i;\n\n\tfromParts = splitPath(from);\n\ttoParts = splitPath(to);\n\n\tfromParts.pop(); // get dirname\n\n\twhile (fromParts[0] === '.') {\n\t\tfromParts.shift();\n\t}\n\n\twhile (fromParts[0] === toParts[0]) {\n\t\tfromParts.shift();\n\t\ttoParts.shift();\n\t}\n\n\tif (fromParts.length) {\n\t\ti = fromParts.length;\n\t\twhile (i--) fromParts[i] = '..';\n\n\t\treturn fromParts.concat(toParts).join('/');\n\t} else {\n\t\ttoParts.unshift('.');\n\t\treturn toParts.join('/');\n\t}\n}\n\nfunction markBundleSourcemapLocations(bundle) {\n\tbundle.modules.forEach(function (mod) {\n\t\twalk(mod.ast, {\n\t\t\tenter: function (node) {\n\t\t\t\tmod.body.addSourcemapLocation(node.start);\n\t\t\t}\n\t\t});\n\t});\n}\n\nfunction markModuleSourcemapLocations(mod) {\n\twalk(mod.ast, {\n\t\tenter: function (node) {\n\t\t\tmod.body.addSourcemapLocation(node.start);\n\t\t}\n\t});\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/utils/packageResult.js.01-babel.map","\nexport default resolveId;\n\nexport { resolveAgainst };\nimport { splitPath } from 'utils/sanitize';\n\n/**\n * Resolves an importPath relative to the module that is importing it\n * @param {string} importPath - the (possibly relative) path of an imported module\n * @param {string} importerPath - the (relative to `base`) path of the importing module\n * @returns {string}\n */\nfunction resolveId(importPath, importerPath) {\n\tvar resolved, importerParts, importParts;\n\n\tif (importPath[0] !== '.') {\n\t\tresolved = importPath;\n\t} else {\n\t\timporterParts = splitPath(importerPath);\n\t\timportParts = splitPath(importPath);\n\n\t\tif (importParts[0] === '.') {\n\t\t\timportParts.shift();\n\t\t}\n\n\t\timporterParts.pop(); // get dirname\n\t\twhile (importParts[0] === '..') {\n\t\t\timportParts.shift();\n\t\t\timporterParts.pop();\n\t\t}\n\n\t\twhile (importParts[0] === '.') {\n\t\t\timportParts.shift();\n\t\t}\n\n\t\tresolved = importerParts.concat(importParts).join('/');\n\t}\n\n\treturn resolved;\n}\n\nfunction resolveAgainst(importerPath) {\n\treturn function (importPath) {\n\t\treturn resolveId(importPath, importerPath);\n\t};\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/utils/resolveId.js.01-babel.map","\n\nexport default getImportSummary;\nimport resolveId from '../resolveId';\nfunction getImportSummary(_ref) {\n\tvar imports = _ref.imports;\n\tvar absolutePaths = _ref.absolutePaths;\n\tvar name = _ref.name;\n\n\tvar paths = [];\n\tvar names = [];\n\tvar seen = {};\n\tvar placeholders = 0;\n\n\timports.forEach(function (x) {\n\t\tvar path = x.id || x.path; // TODO unify these\n\n\t\tif (!seen[path]) {\n\t\t\tseen[path] = true;\n\n\t\t\tpaths.push(path);\n\n\t\t\t// TODO x could be an external module, or an internal one.\n\t\t\t// they have different shapes, resulting in the confusing\n\t\t\t// code below\n\t\t\tif (x.needsDefault || x.needsNamed || x.specifiers && x.specifiers.length) {\n\t\t\t\twhile (placeholders) {\n\t\t\t\t\tnames.push('__dep' + names.length + '__');\n\t\t\t\t\tplaceholders--;\n\t\t\t\t}\n\t\t\t\tnames.push(x.name);\n\t\t\t} else {\n\t\t\t\tplaceholders++;\n\t\t\t}\n\t\t}\n\t});\n\n\tvar ids = absolutePaths ? paths.map(function (relativePath) {\n\t\treturn resolveId(relativePath, name);\n\t}) : paths.slice();\n\n\treturn { ids: ids, paths: paths, names: names };\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/utils/amd/getImportSummary.js.01-babel.map","\n\nexport default processName;\nimport { quote } from '../mappers';\nfunction processName(name) {\n\treturn name ? quote(name) + ', ' : '';\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/utils/amd/processName.js.01-babel.map","\n\nexport default processIds;\nimport { quote } from '../mappers';\nfunction processIds(ids) {\n\treturn ids.length ? '[' + ids.map(quote).join(', ') + '], ' : '';\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/utils/amd/processIds.js.01-babel.map","\n\nexport default amdIntro;\nimport getImportSummary from './getImportSummary';\nimport processName from './processName';\nimport processIds from './processIds';\nfunction amdIntro(_ref) {\n\tvar name = _ref.name;\n\tvar imports = _ref.imports;\n\tvar hasExports = _ref.hasExports;\n\tvar indentStr = _ref.indentStr;\n\tvar absolutePaths = _ref.absolutePaths;\n\tvar useStrict = _ref.useStrict;\n\n\tvar _getImportSummary = getImportSummary({ name: name, imports: imports, absolutePaths: absolutePaths });\n\n\tvar ids = _getImportSummary.ids;\n\tvar names = _getImportSummary.names;\n\n\tif (hasExports) {\n\t\tids.unshift('exports');\n\t\tnames.unshift('exports');\n\t}\n\n\tvar intro = '\\ndefine(' + processName(name) + processIds(ids) + 'function (' + names.join(', ') + ') {\\n\\n';\n\n\tif (useStrict) {\n\t\tintro += indentStr + '\\'use strict\\';\\n\\n';\n\t}\n\n\treturn intro;\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/utils/amd/amdIntro.js.01-babel.map","\n\nexport default amd;\nimport transformExportDeclaration from './utils/transformExportDeclaration';\nimport packageResult from 'utils/packageResult';\nimport amdIntro from '../../../utils/amd/amdIntro';\nfunction amd(mod, options) {\n\tmod.imports.forEach(function (x) {\n\t\tmod.body.remove(x.start, x.next);\n\t});\n\n\ttransformExportDeclaration(mod.exports[0], mod.body);\n\n\tvar intro = amdIntro({\n\t\tname: options.amdName,\n\t\timports: mod.imports,\n\t\tabsolutePaths: options.absolutePaths,\n\t\tindentStr: mod.body.getIndentString(),\n\t\tuseStrict: options.useStrict !== false\n\t});\n\n\tmod.body.trim().indent().prepend(intro).trim().append('\\n\\n});');\n\n\treturn packageResult(mod, mod.body, options, 'toAmd');\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/standalone/builders/defaultsMode/amd.js.01-babel.map","\n\nexport default cjs;\nimport hasOwnProp from 'utils/hasOwnProp';\nimport packageResult from 'utils/packageResult';\nimport { req } from 'utils/mappers';\nfunction cjs(mod, options) {\n\tvar seen = {};\n\n\tmod.imports.forEach(function (x) {\n\t\tif (!hasOwnProp.call(seen, x.path)) {\n\t\t\tvar replacement = x.isEmpty ? req(x.path) + ';' : 'var ' + x.as + ' = ' + req(x.path) + ';';\n\t\t\tmod.body.replace(x.start, x.end, replacement);\n\n\t\t\tseen[x.path] = true;\n\t\t} else {\n\t\t\tmod.body.remove(x.start, x.next);\n\t\t}\n\t});\n\n\tvar exportDeclaration = mod.exports[0];\n\n\tif (exportDeclaration) {\n\t\tswitch (exportDeclaration.type) {\n\t\t\tcase 'namedFunction':\n\t\t\tcase 'namedClass':\n\t\t\t\tmod.body.remove(exportDeclaration.start, exportDeclaration.valueStart);\n\t\t\t\tmod.body.replace(exportDeclaration.end, exportDeclaration.end, '\\nmodule.exports = ' + exportDeclaration.name + ';');\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmod.body.replace(exportDeclaration.start, exportDeclaration.valueStart, 'module.exports = ');\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (options.useStrict !== false) {\n\t\tmod.body.prepend('\\'use strict\\';\\n\\n').trimLines();\n\t}\n\n\treturn packageResult(mod, mod.body, options, 'toCjs');\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/standalone/builders/defaultsMode/cjs.js.01-babel.map","\n\nexport default umdIntro;\nimport { globalify, req } from 'utils/mappers';\nimport processName from '../amd/processName';\nimport processIds from '../amd/processIds';\nimport getImportSummary from '../amd/getImportSummary';\nfunction umdIntro(_ref) {\n\tvar amdName = _ref.amdName;\n\tvar name = _ref.name;\n\tvar hasExports = _ref.hasExports;\n\tvar imports = _ref.imports;\n\tvar absolutePaths = _ref.absolutePaths;\n\tvar externalDefaults = _ref.externalDefaults;\n\tvar indentStr = _ref.indentStr;\n\tvar strict = _ref.strict;\n\tvar useStrict = _ref.useStrict;\n\n\tvar useStrictPragma = useStrict ? ' \\'use strict\\';' : '';\n\tvar intro = undefined;\n\n\tif (!hasExports && !imports.length) {\n\t\tintro = '(function (factory) {\\n\\t\\t\\t\\t!(typeof exports === \\'object\\' && typeof module !== \\'undefined\\') &&\\n\\t\\t\\t\\ttypeof define === \\'function\\' && define.amd ? define(' + processName(amdName) + 'factory) :\\n\\t\\t\\t\\tfactory()\\n\\t\\t\\t}(function () {' + useStrictPragma + '\\n\\n\\t\\t\\t';\n\t} else {\n\t\tvar _getImportSummary = getImportSummary({ imports: imports, name: amdName, absolutePaths: absolutePaths });\n\n\t\tvar ids = _getImportSummary.ids;\n\t\tvar paths = _getImportSummary.paths;\n\t\tvar names = _getImportSummary.names;\n\n\t\tvar amdExport = undefined,\n\t\t    cjsExport = undefined,\n\t\t    globalExport = undefined,\n\t\t    defaultsBlock = undefined;\n\n\t\tif (strict) {\n\t\t\tcjsExport = 'factory(' + (hasExports ? ['exports'] : []).concat(paths.map(req)).join(', ') + ')';\n\t\t\tvar globalDeps = (hasExports ? ['(global.' + name + ' = {})'] : []).concat(names.map(globalify)).join(', ');\n\t\t\tglobalExport = 'factory(' + globalDeps + ')';\n\n\t\t\tif (hasExports) {\n\t\t\t\tids.unshift('exports');\n\t\t\t\tnames.unshift('exports');\n\t\t\t}\n\n\t\t\tamdExport = 'define(' + processName(amdName) + processIds(ids) + 'factory)';\n\t\t\tdefaultsBlock = '';\n\t\t\tif (externalDefaults && externalDefaults.length > 0) {\n\t\t\t\tdefaultsBlock = externalDefaults.map(function (x) {\n\t\t\t\t\treturn '\\t' + (x.needsNamed ? 'var ' + x.name + '__default' : x.name) + (' = (\\'default\\' in ' + x.name + ' ? ' + x.name + '[\\'default\\'] : ' + x.name + ');');\n\t\t\t\t}).join('\\n') + '\\n\\n';\n\t\t\t}\n\t\t} else {\n\t\t\tamdExport = 'define(' + processName(amdName) + processIds(ids) + 'factory)';\n\t\t\tcjsExport = (hasExports ? 'module.exports = ' : '') + ('factory(' + paths.map(req).join(', ') + ')');\n\t\t\tglobalExport = (hasExports ? 'global.' + name + ' = ' : '') + ('factory(' + names.map(globalify).join(', ') + ')');\n\n\t\t\tdefaultsBlock = '';\n\t\t}\n\n\t\tintro = '(function (global, factory) {\\n\\t\\t\\t\\ttypeof exports === \\'object\\' && typeof module !== \\'undefined\\' ? ' + cjsExport + ' :\\n\\t\\t\\t\\ttypeof define === \\'function\\' && define.amd ? ' + amdExport + ' :\\n\\t\\t\\t\\t' + globalExport + '\\n\\t\\t\\t}(this, function (' + names.join(', ') + ') {' + useStrictPragma + '\\n\\n\\t\\t\\t' + defaultsBlock;\n\t}\n\n\treturn intro.replace(/^\\t\\t\\t/gm, '').replace(/\\t/g, indentStr);\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/utils/umd/umdIntro.js.01-babel.map","var EsperantoError = function (message, data) {\n\tvar prop;\n\n\tthis.message = message;\n\tthis.stack = new Error().stack;\n\n\tfor (prop in data) {\n\t\tif (data.hasOwnProperty(prop)) {\n\t\t\tthis[prop] = data[prop];\n\t\t}\n\t}\n};\n\nEsperantoError.prototype = new Error();\nEsperantoError.prototype.constructor = EsperantoError;\nEsperantoError.prototype.name = 'EsperantoError';\n\nexport default EsperantoError;\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/utils/EsperantoError.js.01-babel.map","\n\nexport default requireName;\nimport EsperantoError from 'utils/EsperantoError';\nfunction requireName(options) {\n\tif (!options.name) {\n\t\tthrow new EsperantoError('You must supply a `name` option for UMD modules', {\n\t\t\tcode: 'MISSING_NAME'\n\t\t});\n\t}\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/utils/umd/requireName.js.01-babel.map","\n\nexport default umd;\nimport transformExportDeclaration from './utils/transformExportDeclaration';\nimport packageResult from 'utils/packageResult';\nimport umdIntro from 'utils/umd/umdIntro';\nimport requireName from 'utils/umd/requireName';\nfunction umd(mod, options) {\n\trequireName(options);\n\n\tmod.imports.forEach(function (x) {\n\t\tmod.body.remove(x.start, x.next);\n\t});\n\n\tvar intro = umdIntro({\n\t\thasExports: mod.exports.length > 0,\n\t\timports: mod.imports,\n\t\tamdName: options.amdName,\n\t\tabsolutePaths: options.absolutePaths,\n\t\tname: options.name,\n\t\tindentStr: mod.body.getIndentString(),\n\t\tuseStrict: options.useStrict !== false\n\t});\n\n\ttransformExportDeclaration(mod.exports[0], mod.body);\n\n\tmod.body.indent().prepend(intro).trimLines().append('\\n\\n}));');\n\n\treturn packageResult(mod, mod.body, options, 'toUmd');\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/standalone/builders/defaultsMode/umd.js.01-babel.map","import amd from './amd';\nimport cjs from './cjs';\nimport umd from './umd';\n\nexport default {\n\tamd: amd,\n\tcjs: cjs,\n\tumd: umd\n};\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/standalone/builders/defaultsMode/index.js.01-babel.map","export default gatherImports;\n\nfunction gatherImports(imports) {\n\tvar chains = {};\n\tvar identifierReplacements = {};\n\n\timports.forEach(function (x) {\n\t\tx.specifiers.forEach(function (s) {\n\t\t\tif (s.isBatch) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar name = s.as;\n\t\t\tvar replacement = x.name + (s.isDefault ? \"['default']\" : \".\" + s.name);\n\n\t\t\tif (!x.passthrough) {\n\t\t\t\tidentifierReplacements[name] = replacement;\n\t\t\t}\n\n\t\t\tchains[name] = replacement;\n\t\t});\n\t});\n\n\treturn [chains, identifierReplacements];\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/standalone/builders/strictMode/utils/gatherImports.js.01-babel.map","export default getExportNames;\n\nfunction getExportNames(exports) {\n\tvar result = {};\n\n\texports.forEach(function (x) {\n\t\tif (x.isDefault) return;\n\n\t\tif (x.hasDeclaration) {\n\t\t\tresult[x.name] = x.name;\n\t\t\treturn;\n\t\t}\n\n\t\tx.specifiers.forEach(function (s) {\n\t\t\tresult[s.name] = s.as;\n\t\t});\n\t});\n\n\treturn result;\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/standalone/builders/strictMode/utils/getExportNames.js.01-babel.map","\nexport default getReadOnlyIdentifiers;\n/**\n * Scans an array of imports, and determines which identifiers\n   are readonly, and which cannot be assigned to. For example\n   you cannot `import foo from 'foo'` then do `foo = 42`, nor\n   can you `import * as foo from 'foo'` then do `foo.answer = 42`\n * @param {array} imports - the array of imports\n * @returns {array} [ importedBindings, importedNamespaces ]\n */\nfunction getReadOnlyIdentifiers(imports) {\n\tvar importedBindings = {},\n\t    importedNamespaces = {};\n\n\timports.forEach(function (x) {\n\t\tif (x.passthrough) return;\n\n\t\tx.specifiers.forEach(function (s) {\n\t\t\tif (s.isBatch) {\n\t\t\t\timportedNamespaces[s.as] = true;\n\t\t\t} else {\n\t\t\t\timportedBindings[s.as] = true;\n\t\t\t}\n\t\t});\n\t});\n\n\treturn [importedBindings, importedNamespaces];\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/utils/getReadOnlyIdentifiers.js.01-babel.map","\n\nexport default disallowIllegalReassignment;\nimport hasOwnProp from 'utils/hasOwnProp';\n\nvar bindingMessage = 'Cannot reassign imported binding ',\n    namespaceMessage = 'Cannot reassign imported binding of namespace ';\nfunction disallowIllegalReassignment(node, importedBindings, importedNamespaces, scope) {\n\tvar assignee = undefined,\n\t    isNamespaceAssignment = undefined;\n\n\tif (node.type === 'AssignmentExpression') {\n\t\tassignee = node.left;\n\t} else if (node.type === 'UpdateExpression') {\n\t\tassignee = node.argument;\n\t} else {\n\t\treturn; // not an assignment\n\t}\n\n\tif (assignee.type === 'MemberExpression') {\n\t\tassignee = assignee.object;\n\t\tisNamespaceAssignment = true;\n\t}\n\n\tif (assignee.type !== 'Identifier') {\n\t\treturn; // not assigning to a binding\n\t}\n\n\tvar name = assignee.name;\n\n\tif (hasOwnProp.call(isNamespaceAssignment ? importedNamespaces : importedBindings, name) && !scope.contains(name)) {\n\t\tthrow new Error((isNamespaceAssignment ? namespaceMessage : bindingMessage) + '`' + name + '`');\n\t}\n}\n//# sourceMappingURL=/www/ESPERANTO/esperanto/.gobble-build/01-babel/1/utils/ast/disallowIllegalReassignment.js.01-ba